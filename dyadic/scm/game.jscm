;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/weaving.scm")
(load "scm/loom.scm")

(define l (loom
           (list
            (repeat (list 1 0 0 0 1 1 0 0 0 0 0 0 0 0) 1)
            (repeat (list 0 1 0 0 0 0 1 1 0 0 0 0 0 1) 1)
            (repeat (list 0 0 1 0 0 0 0 0 1 1 0 0 1 0) 1)
            (repeat (list 0 0 0 1 0 0 0 0 0 0 1 1 0 0) 1))
           (list
            (list 0 0 0 1)
            (list 0 0 1 0)
            (list 0 0 1 1)
            (list 0 1 0 0)
            (list 0 1 0 1)
            (list 0 1 1 0)
            (list 0 1 1 1)
            (list 1 0 0 0)
            (list 1 0 0 1)
            (list 1 0 1 0)
            (list 1 0 1 1)
            (list 1 1 0 0)
            (list 1 1 0 1)
            (list 1 1 1 0)
            )
           (repeat (list "fat") 27)))

(define weave (loom-weave l (repeat (list "thin" "thin" "thin" "thin" "thin" "thin") 2) 0))

(define (build-line id p v)
  (index-for-each
   (lambda (i v)
     (if (zero? v)
         (p.append (string-append "<input id='" id "-" (+ i 1) "' type='checkbox' />"))
         (p.append (string-append "<input id='" id "-" (+ i 1) "' type='checkbox' checked=true />"))))
   v))


(define (build-interface)
  (let ((c ($ "#heddles") ))
    (c.append "warp colours: <input id='warp-cols' type='text' value='Y'/> L,D,Y,P (& lowercase) <br/>")
    (c.append "weft colours: <input id='weft-cols' type='text' value='P'/> L,D,Y,P (& lowercase) <br/>")

    (c.append "Heddles<br/>")
    (build-line "heddle-1" c (list 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)) (c.append "<br/>")
    (build-line "heddle-2" c (list 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)) (c.append "<br/>")
    (build-line "heddle-3" c (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (c.append "<br/>")
    (build-line "heddle-4" c (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (c.append "<br/>"))
  (let ((c ($ "#liftplan") ))
    (c.append "Lift plan<br/>")
    (build-line "lift-1" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-2" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-3" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-4" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-5" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-6" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-7" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-8" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-9" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-10" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-11" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-12" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-13" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-14" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-15" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-16" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-17" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-18" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-19" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-20" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-21" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-22" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-23" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-24" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-25" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-26" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-27" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-28" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-29" c (list 1 0 0 0)) (c.append "<br/>")
    (build-line "lift-30" c (list 0 1 0 0)) (c.append "<br/>")
    (build-line "lift-31" c (list 1 0 0 0)) (c.append "<br/>")
    ))

(define (read-line id c)
  (cond
   ((zero? c) ())
   (else
    (let ((w ($ (string-append "#" id "-" c))))
      (append (read-line id (- c 1)) (if (js "w[0].checked") 1 0))))))

(define (read-text id)
  (let ((w ($ (string-append "#" id))))
    (js "w[0].value") ))

(define (string-to-list str c)
  (if (>= c str.length)
      (list)
      (cons (js "str[c]") (string-to-list str (+ c 1)))))


(define (colcode-to-list colcode)
  (if (eq? colcode "")
      (list "fat")
      (map
       (lambda (s)
         (cond
          ((eq? s "L") "fat")
          ((eq? s "l") "thin")
          ((eq? s "D") "fat-dark")
          ((eq? s "d") "thin-dark")
          ((eq? s "P") "fat-pink")
          ((eq? s "p") "thin-pink")
          ((eq? s "Y") "fat-yellow")
          ((eq? s "y") "thin-yellow")
          (else "thin")))
       (string-to-list colcode 0))))

(define (update)
  (console.log (read-text "warp-cols"))
  (set! l (loom
           (list
            (read-line "heddle-1" 24)
            (read-line "heddle-2" 24)
            (read-line "heddle-3" 24)
            (read-line "heddle-4" 24))

           (build-list
            31 (lambda (i)
                 (read-line (string-append "lift-" (+ i 1)) 4)))

           (max-repeat (colcode-to-list (read-text "warp-cols")) 24)))
  (set! weave
        (loom-weave l (max-repeat (colcode-to-list (read-text "weft-cols")) 31) 0))
  )

(define update-tick 0)

(define (nightjar-intro c)
  (build-interface)
  (game-modify-render
   (lambda (ctx)
     (set! update-tick (+ (* 100 (game-time-delta c)) update-tick))
     (when (> update-tick 5)
           (set! update-tick 0)
           (update)
           (set! ctx.font "normal 30pt amatic")
           (ctx.clearRect 0 0 screen-width screen-height)
           (draw-weave ctx 0 0 weave)
           (set! ctx.font "normal 40pt amatic")
           ))
   (game-modify-buttons
    (list
     )
    c)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup
(set! ctx.font "normal 10pt amatic")

(load-images!
 (append
  (list
   "thr-warp-thin.png"
   "thr-weft-thin.png"
   "thr-warp-fat.png"
   "thr-weft-fat.png"
   "thr-warp-fat-dark.png"
   "thr-weft-fat-dark.png"
   "thr-warp-thin-dark.png"
   "thr-weft-thin-dark.png"
   "thr-warp-fat-pink.png"
   "thr-weft-fat-pink.png"
   "thr-warp-thin-pink.png"
   "thr-weft-thin-pink.png"
   "thr-warp-fat-yellow.png"
   "thr-weft-fat-yellow.png"
   "thr-warp-thin-yellow.png"
   "thr-weft-thin-yellow.png"
   "tog-off.png"
   "tog-on.png"
   ))
 (lambda ()
   (start-game canvas ctx)))
