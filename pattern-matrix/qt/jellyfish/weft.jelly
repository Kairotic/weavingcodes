;; -*- mode: scheme; -*-
(let ((vertex positions-start)
      (t 0)
      (v 0)
      (weft-direction (vector 2 0 0))
      (weft-position (vector -22 0 0))
      (weft-seq 0)
      (draft-pos 0)
      (weft-id -1)
      (weft-z (vector 0 0 0))
      (weft-count 0)
      (weft-total 22)
      (draft-size 5)
      (weaving 0)
      (last-weft-seq -1)
      (selvedge-gap (vector 0 4.5 0))
      (draft-addr (+ normals-start 10)))


  ;(trace (addr selvedge-gap))

  (define read-draft
    (lambda ()
      (read
       (+ draft-addr
          (+ (* draft-pos draft-size)
             (modulo (if (> weft-direction 0)
                         (+ weft-count 1)
                         (- (- weft-total 1) weft-count))
                     (+ draft-size (vector 0 1 1))))))))

     (define calc-weft-z
       (lambda ()
         (set! weft-z
               (if (> (read-draft) 0.5)
                   (vector 0 0 0.01)
                   (vector 0 0 -0.01)))
         (set! weft-count (+ weft-count 1))))


     (define right-selvedge
       (lambda (gap)
         ;; top corner
         (write! vertex
                 (- (+ weft-position (vector 2 0 0)) gap)
                 (- (+ weft-position (vector 2.975 0.325 0)) gap)
                 (- (+ weft-position (vector 2 1 0)) gap))
         (set! vertex (+ vertex 3))
         (write! vertex
                 (- (+ weft-position (vector 2.975 0.325 0)) gap)
                 (- (+ weft-position (vector 3.3 1 0)) gap)
                 (- (+ weft-position (vector 2 1 0)) gap))
         ;; fudge the tex
         (write! (+ (- vertex positions-start) texture-start)
                 (vector 0 1 0)
                 (vector 0 1 0)
                 (vector 0 0 0))
         (set! vertex (+ vertex 3))
         ;; vertical connection
         (write! vertex
                 (+ weft-position (vector 2 0 0))
                 (- (+ weft-position (vector 3.3 1 0)) gap)
                 (- (+ weft-position (vector 2 1 0)) gap)
                 (+ weft-position (vector 2 0 0))
                 (+ weft-position (vector 3.3 0 0))
                 (- (+ weft-position (vector 3.3 1 0)) gap))
         (set! vertex (+ vertex 6))
         ;; bottom corner
         (write! vertex
                 (+ weft-position (vector 3.3 0 0))
                 (+ weft-position (vector 2 0 0))
                 (+ weft-position (vector 2.975 0.975 0)))
         ;; fudge the tex
         (write! (+ (- vertex positions-start) texture-start)
                 (vector 0 1 0)
                 (vector 0 0 0)
                 (vector 0 1 0))
         (set! vertex (+ vertex 3))
         (write! vertex
                 (+ weft-position (vector 2 0 0))
                 (+ weft-position (vector 2 1.3 0))
                 (+ weft-position (vector 2.975 0.975 0)))
         (set! vertex (+ vertex 3))
         ))

     (define left-selvedge
       (lambda (gap)
         ;; top corner
         (write! vertex
                 (- (+ weft-position (vector -1.3 1.3 0)) gap)
                 (- (+ weft-position (vector 0 1.3 0)) gap)
                 (- (+ weft-position (vector -0.975 0.325 0)) gap))
         (set! vertex (+ vertex 3))
         (write! vertex
                 (- (+ weft-position (vector -0.975 0.325 0)) gap)
                 (- (+ weft-position (vector 0 1.3 0)) gap)
                 (- (+ weft-position (vector 0 0 0)) gap))
         ;; fudge the tex
         (write! (+ (- vertex positions-start) texture-start)
                 (vector 0 0 0)
                 (vector 0 1 0)
                 (vector 0 0 0))
         (set! vertex (+ vertex 3))
         ;; vertical connection
         (write! vertex
                 (- (+ weft-position (vector -1.3 1 0)) gap)
                 (+ weft-position (vector 0 0 0))
                 (+ weft-position (vector -1.3 0 0))
                 (- (+ weft-position (vector -1.3 1 0)) gap)
                 (- (+ weft-position (vector 0 1 0)) gap)
                 (+ weft-position (vector 0 0 0)))
         (set! vertex (+ vertex 6))
         ;; bottom corner
         (write! vertex
                 (+ weft-position (vector -0.975 0.975 0))
                 (+ weft-position (vector 0 0 0))
                 (+ weft-position (vector -1.3 0 0)))
         ;; fudge the tex
         (write! (+ (- vertex positions-start) texture-start)
                 (vector 0 0.5 0)
                 (vector 0 1 0)
                 (vector 0 0 0))
         (set! vertex (+ vertex 3))
         (write! vertex
                 (+ weft-position (vector -0.975 0.975 0))
                 (+ weft-position (vector 0 0 0))
                 (+ weft-position (vector 0 1.3 0)))
         ;; fudge the tex
         (write! (+ (- vertex positions-start) texture-start)
                 (vector 0 0.5 0)
                 (vector 0 0.5 0)
                 (vector 0 1 0))
         (set! vertex (+ vertex 3))
         ))

     (forever
      (set! vertex positions-start)
      (loop (< vertex (+ positions-start 1002))
            (when (not (eq? weft-seq last-weft-seq))
                  (set! last-weft-seq weft-seq)
                  (when (eq? weft-seq weft-id)
                        (set! weaving 1)))

            (when (eq? weaving 1)
                  (calc-weft-z)
                  (set! weft-position (+ weft-position weft-direction))

                  ;; selvedge time?
                  (cond
                   ((> weft-count weft-total)
                    (set! weft-count 0)
                    (set! weft-position (- (+ weft-position selvedge-gap)
                                           weft-direction))
                    (set! weft-direction (* weft-direction -1))
                    (if (> 0 weft-direction)
                        (right-selvedge selvedge-gap)
                        (left-selvedge selvedge-gap))
                    (set! weaving 0)
                    (set! weft-position (- weft-position weft-direction)))
                   (else
                    (write! vertex
                            (+ weft-z weft-position)
                            (+ weft-position (+ weft-z (vector 2 1.3 0)))
                            (+ weft-position (+ weft-z (vector 2 0 0)))
                            (+ weft-z weft-position)
                            (+ weft-position (+ weft-z (vector 2 1.3 0)))
                            (+ weft-position (+ weft-z (vector 0 1.3 0))))
                    (set! vertex (+ vertex 6)))))
            ;;(set! t (+ t 0.01))
            )))
