'(let ((vertex positions-start)
         (t 0)
         (v 0)
         (weft-direction (vector 2 0 0))
         (weft-position (vector -20 0 0))
         (weft-t 0)
         (draft-pos 0)
         (draft-start 0)
         (draft 0) (d-b 0) (d-c 0) (d-d 0) (d-e 1)
         (d-f 0) (d-g 0) (d-h 0) (d-i 1) (d-j 0)
         (d-k 0) (d-l 0) (d-m 1) (d-n 0) (d-o 0)
         (d-p 0) (d-q 1) (d-r 0) (d-s 0) (d-t 0)
         (d-u 1) (d-v 0) (d-w 0) (d-x 0) (d-y 0)
         (weft-z (vector 0 0 0))
         (weft-count 0)
         (weft-total 21)
         (draft-size 5))

;    (trace (addr draft-size))

     (define read-draft
       (lambda ()
         (read
          (+ (addr draft)
             (+ (* draft-pos draft-size)
                (if (> weft-direction 0)
                    (modulo weft-count (+ draft-size (vector 0 1 1)) )
                    (modulo (- (- weft-total 1) weft-count) (+ draft-size (vector 0 1 1)) )))))))

     (define calc-weft-z
       (lambda ()
         (set! weft-count (+ weft-count 1))
         (set! weft-z
               (if (> (read-draft) 0.5)
                   (vector 0 0 0.01)
                   (vector 0 0 -0.01)))))


     (define right-selvedge
       (lambda (gap)
         ;; top corner
         (write! vertex
                 (- (+ weft-position (vector 2 0 0)) gap)
                 (- (+ weft-position (vector 3 1 0)) gap)
                 (- (+ weft-position (vector 2 1 0)) gap))
         (set! vertex (+ vertex 3))
         ;; vertical connection
         (write! vertex
                 (- (+ weft-position (vector 3 1 0)) gap)
                 (- (+ weft-position (vector 2 1 0)) gap)
                 (+ weft-position (vector 2 0 0))
                 (- (+ weft-position (vector 3 1 0)) gap)
                 (+ weft-position (vector 2 0 0))
                 (+ weft-position (vector 3 0 0)))
         (set! vertex (+ vertex 6))
         ;; bottom corner
         (write! vertex
                 (+ weft-position (vector 2 0 0))
                 (+ weft-position (vector 3 0 0))
                 (+ weft-position (vector 2 1 0)))
         (set! vertex (+ vertex 3))
         ))

     (define left-selvedge
       (lambda (gap)
         ;; top corner
         (write! vertex
                 (- (+ weft-position (vector 0 0 0)) gap)
                 (- (+ weft-position (vector -1 1 0)) gap)
                 (- (+ weft-position (vector 0 1 0)) gap))
         (set! vertex (+ vertex 3))
         ;; vertical connection
         (write! vertex
                 (- (+ weft-position (vector -1 1 0)) gap)
                 (- (+ weft-position (vector 0 1 0)) gap)
                 (+ weft-position (vector 0 0 0))
                 (- (+ weft-position (vector -1 1 0)) gap)
                 (+ weft-position (vector 0 0 0))
                 (+ weft-position (vector -1 0 0)))
         (set! vertex (+ vertex 6))
         ;; bottom corner
         (write! vertex
                 (+ weft-position (vector 0 0 0))
                 (+ weft-position (vector -1 0 0))
                 (+ weft-position (vector 0 1 0)))
         (set! vertex (+ vertex 3))
         ))

     (forever
      (set! vertex positions-start)
      (loop (< vertex positions-end)
            (calc-weft-z)
            (set! weft-position (+ weft-position weft-direction))
            ;; selvedge time?
            (when (> weft-count weft-total)
                  (set! weft-count 0)
                  ;;(trace draft-pos)
                  (set! draft-pos (+ draft-pos 1))
                  (when (> draft-pos draft-size)
                        (set! draft-pos draft-start))
                  (set! weft-position (- (+ weft-position (vector 0 3 0))
                                         weft-direction))
                  (set! weft-direction (* weft-direction -1))
                  (if (> 0 weft-direction)
                      (right-selvedge (vector 0 3 0))
                      (left-selvedge (vector 0 3 0))))

            (set! weft-t (/ weft-count 21))

            (write! vertex
                    (+ weft-z weft-position)
                    (+ weft-position (+ weft-z (vector 2 1.3 0)))
                    (+ weft-position (+ weft-z (vector 2 0 0)))
                    (+ weft-z weft-position)
                    (+ weft-position (+ weft-z (vector 2 1.3 0)))
                    (+ weft-position (+ weft-z (vector 0 1.3 0))))
            (set! vertex (+ vertex 6)))
      ;;(set! t (+ t 0.01))
      ))